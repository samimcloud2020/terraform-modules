A module is a container for multiple resources that are used together. 
Every Terraform configuration has at least one module, known as its root module, <-------------------------------root module
which consists of the resources defined in the . tf files in the main working directory.


A module can call other modules, which lets you include the child module's resources into the configuration in a concise way. 
Modules can also be called multiple times, 
either within the same configuration or in separate configurations, allowing resource configurations to be packaged and re-used.


---------------------Calling a Child Module------------------------------------------
To call a module means to include the contents of that module into the configuration with specific values for its input variables.
Modules are called from within other modules using module blocks:

module "servers" {
  source = "./app-cluster"

  servers = 5
}


A module that includes a module block like this is the calling module of the child module.

The label immediately after the module keyword is a local name, which the calling module can use to refer to this instance of the module.

Within the block body (between { and }) are the arguments for the module. Module calls use the following kinds of arguments:

The source argument is mandatory for all modules.

The version argument is recommended for modules from a registry.

Most other arguments correspond to input variables defined by the module. (The servers argument in the example above is one of these.)

Terraform defines a few other meta-arguments that can be used with all modules, including for_each and depends_on.

----------------------------------meta arguments---------------------------------------------------------

Along with source and version, Terraform defines a few more optional meta-arguments that have special meaning across all modules, 
described in more detail in the following pages:

---------->count - Creates multiple instances of a module from a single module block. See the count page for details.

----------->for_each - Creates multiple instances of a module from a single module block. See the for_each page for details.

---------->providers - Passes provider configurations to a child module. See the providers page for details. 
If not specified, the child module inherits all of the default (un-aliased) provider configurations from the calling module.

---------->depends_on - Creates explicit dependencies between the entire module and the listed targets. See the depends_on page for details.

Terraform does not use the lifecycle argument. However, the lifecycle block is reserved for future versions.



---------------------------------Accessing Module Output Values----------------------------------------------------------
The resources defined in a module are encapsulated, so the calling module cannot access their attributes directly. 
However, the child module can declare output values to selectively export certain values to be accessed by the calling module.




------------------------------Transferring Resource State Into Modules-------------------------------------
Moving resource blocks from one module into several child modules causes Terraform to see the new location as an entirely different resource.
As a result, Terraform plans to destroy all resource instances at the old address and create new instances at the new address.

To preserve existing objects, you can use refactoring blocks to record the old and new addresses for each resource instance. 
